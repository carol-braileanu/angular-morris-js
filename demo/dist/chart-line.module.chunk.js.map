{"version":3,"sources":["/Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line-routing.module.ts","/Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line.component.css","/Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line.component.html","/Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line.component.ts","/Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line.module.ts","/Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/morris-js-line.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAyC;AACc;AAEK;AAE5D,IAAM,MAAM,GAAW,CAAC;QACtB,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,iFAAkB;KAC9B,CAAC,CAAC;AAMH,IAAa,sBAAsB;IAAnC;IAAsC,CAAC;IAAD,6BAAC;AAAD,CAAC;AAA1B,sBAAsB;IAJlC,+DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,6DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,6DAAY,CAAC;KACxB,CAAC;GACW,sBAAsB,CAAI;AAAJ;;;;;;;;ACdnC;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA,2C;;;;;;;ACXA,6MAA6M,aAAa,8IAA8I,0FAA0F,IAAI,QAAQ,4bAA4b,gCAAgC,WAAW,gCAAgC,WAAW,gCAAgC,WAAW,gCAAgC,WAAW,gCAAgC,WAAW,gCAAgC,WAAW,gCAAgC,IAAI,i0JAAi0J,6CAA6C,QAAQ,glCAAglC,+BAA+B,OAAO,23CAA23C,qBAAqB,OAAO,gbAAgb,4BAA4B,OAAO,ksH;;;;;;;;;;;;;;;;;ACAr8R;AAEE;AASnE,IAAa,kBAAkB;IAA/B;IAkBA,CAAC;IAdC;;OAEG;IACH,qCAAQ,GAAR;QACE,IAAI,CAAC,aAAa,GAAG,sEAAa,CAAC;QACnC,IAAI,CAAC,gBAAgB,GAAG,yEAAgB,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,4CAAe,GAAf;QACE,KAAK,CAAC,YAAY,EAAE,CAAC;IACvB,CAAC;IACH,yBAAC;AAAD,CAAC;AAlBY,kBAAkB;IAL9B,gEAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,iGAA0C;QAC1C,gGAAyC;KAC1C,CAAC;GACW,kBAAkB,CAkB9B;AAlB8B;;;;;;;;;;;;;;;;;;;;;;;ACXU;AACM;AAEH;AAEU;AAEe;AACT;AAW5D,IAAa,eAAe;IAA5B;IAA+B,CAAC;IAAD,sBAAC;AAAD,CAAC;AAAnB,eAAe;IAT3B,+DAAQ,CAAC;QACR,OAAO,EAAE;YACP,6DAAY;YACZ,0FAAsB;YACtB,gEAAS;YACT,kEAAc;SACf;QACD,YAAY,EAAE,CAAC,iFAAkB,CAAC;KACnC,CAAC;GACW,eAAe,CAAI;AAAJ;;;;;;;;;;;ACnBrB,IAAI,gBAAgB,GAAG;IAC5B,IAAI,EAAE,GAAG;IACT,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;IACjB,MAAM,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;IAChC,MAAM,EAAE,IAAI;CACb,CAAC;AAEK,IAAI,aAAa,GAAI;IAC1B,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE;IAC5B,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE;IAC5B,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE;IAC5B,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE;IAC5B,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE;IAC5B,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,EAAG,CAAC,EAAE,EAAE,EAAE;IAC5B,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE;CAC7B,CAAC","file":"chart-line.module.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ChartLineComponent } from './chart-line.component';\n\nconst routes: Routes = [{\n  path: '',\n  component: ChartLineComponent\n}];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ChartLineRoutingModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line-routing.module.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line.component.css\n// module id = ../../../../../demo/src/app/chart-line/chart-line.component.css\n// module chunks = chart-line.module","module.exports = \"<lte-box lteTitle=\\\"Demo\\\" [collapsable]=\\\"false\\\" [removable]=\\\"false\\\">\\n  <div mk-morris-js [options]=\\\"chartLineOptions\\\" [data]=\\\"chartLineData\\\" type=\\\"Line\\\" style=\\\"height: 500px; width: 100%;\\\"></div>\\n</lte-box>\\n\\n<lte-box lteTitle=\\\"Usage\\\" [collapsable]=\\\"false\\\" [removable]=\\\"false\\\">\\n  <pre><code class=\\\"language-html\\\">&lt;div mk-morris-js [options]=\\\"chartLineOptions\\\" [data]=\\\"chartLineData\\\" type=\\\"Line\\\"&gt;&lt;/div&gt;</code></pre>\\n</lte-box>\\n\\n<lte-box lteTitle=\\\"Datas\\\" [collapsable]=\\\"true\\\" [removable]=\\\"false\\\">\\n  <p>\\n    This is an array of objects, containing x and y attributes as described by the <code>xkey</code> and <code>ykeys</code> options.\\n    <br>\\n    <em>Note: ordering doesn't matter here - you can supply the data in whatever order works best for you.</em>\\n  </p>\\n  <pre><code class=\\\"language-html\\\">let chartAreaData = [\\n  &#123; y: '2006', a: 100, b: 90 &#125;,\\n  &#123; y: '2007', a: 75,  b: 65 &#125;,\\n  &#123; y: '2008', a: 50,  b: 40 &#125;,\\n  &#123; y: '2009', a: 75,  b: 65 &#125;,\\n  &#123; y: '2010', a: 50,  b: 40 &#125;,\\n  &#123; y: '2011', a: 75,  b: 65 &#125;,\\n  &#123; y: '2012', a: 100, b: 90 &#125;\\n];</code></pre>\\n</lte-box>\\n\\n<lte-box lteTitle=\\\"Options\\\" [collapsable]=\\\"true\\\" [removable]=\\\"false\\\">\\n  <table class=\\\"table table-striped table-bordered\\\">\\n    <tbody>\\n      <tr>\\n        <td><code>xkey</code><br><b>required</b></td>\\n        <td>\\n          A string containing the name of the attribute that contains\\n          date (X) values.\\n          <br>\\n          Timestamps are accepted in the form of millisecond timestamps (as\\n          returned by <code>Date.getTime()</code> or as strings in the following\\n          formats:\\n          <ul>\\n            <li><code>2012</code></li>\\n            <li><code>2012 Q1</code></li>\\n            <li><code>2012 W1</code></li>\\n            <li><code>2012-02</code></li>\\n            <li><code>2012-02-24</code></li>\\n            <li><code>2012-02-24 15:00</code></li>\\n            <li><code>2012-02-24 15:00:00</code></li>\\n            <li><code>2012-02-24 15:00:00.000</code></li>\\n          </ul>\\n          <em>\\n            Note: when using millisecond timestamps, it's recommended that\\n            you check out the <code>dateFormat</code> option.\\n          </em>\\n          <br>\\n          <em>\\n            Note 2: date/time strings can optionally contain a\\n            <code>T</code> between the date and time parts, and/or a\\n            <code>Z</code> suffix, for compatibility with ISO-8601\\n            dates.\\n          </em>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>ykeys</code><br><b>required</b></td>\\n        <td>\\n          A list of strings containing names of attributes that\\n          contain Y values (one for each series of data to be\\n          plotted).\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>labels</code><br><b>required</b></td>\\n        <td>\\n          A list of strings containing labels for the data series\\n          to be plotted (corresponding to the values in the\\n          <code>ykeys</code> option).\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>lineColors</code></td>\\n        <td>\\n          Array containing colors for the series lines/points.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>lineWidth</code></td>\\n        <td>\\n          Width of the series lines, in pixels.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>pointSize</code></td>\\n        <td>\\n          Diameter of the series points, in pixels.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>pointFillColors</code></td>\\n        <td>\\n          Colors for the series points.  By default uses the same\\n          values as <code>lineColors</code>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>pointStrokeColors</code></td>\\n        <td>\\n          Colors for the outlines of the series points. (#ffffff by\\n          default).\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>ymax</code></td>\\n        <td>\\n          Max. bound for Y-values.  Alternatively, set this to\\n          <code>'auto'</code> to compute automatically, or\\n          <code>'auto [num]'</code> to automatically compute and\\n          ensure that the max y-value is <em>at least</em>\\n          <code>[num]</code>.\\n        </td>\\n      </tr>\\n        <tr><td><code>ymin</code></td>\\n        <td>\\n          Min. bound for Y-values.  Alternatively, set this to\\n          <code>'auto'</code> to compute automatically, or\\n          <code>'auto [num]'</code> to automatically compute and\\n          ensure that the min y-value is <em>at most</em>\\n          <code>[num]</code>.\\n          <br>\\n          <em>\\n            Hint: you can use this to create graphs with\\n            false origins.\\n          </em>\\n        </td>\\n      </tr><tr>\\n      </tr>\\n      <tr>\\n        <td><code>smooth</code></td>\\n        <td>\\n          Set to <code>false</code> to disable line smoothing.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>hideHover</code></td>\\n        <td>\\n          Set to <code>false</code> to always show a hover legend.\\n          <br>\\n          Set to <code>true</code> or <code>'auto'</code> to only show the\\n          hover legend when the mouse cursor is over the chart.\\n          <br>\\n          Set to <code>'always'</code> to never show a hover legend.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>hoverCallback</code></td>\\n        <td>\\n          Provide a function on this option to generate custom\\n          hover legends.\\n          <br>\\n          The function will be called with the index of the row under\\n          the hover legend, the options object passed to the constructor\\n          as arguments, a string containing the default generated hover legend\\n          content HTML, and an object containing the original data for the\\n          row as passed in the <code>data</code> option.\\n          <br>\\n          <em>eg:</em>\\n          <pre>hoverCallback: function (index, options, content, row) &#123;\\nreturn \\\"sin(\\\" + row.x + \\\") = \\\" + row.y;\\n&#125;</pre>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>parseTime</code></td>\\n        <td>\\n          Set to <code>false</code> to skip time/date parsing for X\\n          values, instead treating them as an equally-spaced\\n          series.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>units</code></td>\\n        <td>\\n          <em>\\n            Deprecated.  Please use <code>postUnits</code>.\\n          </em>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>postUnits</code></td>\\n        <td>\\n          Set to a string value (eg: <code>'%'</code>) to add a\\n          label suffix all y-labels.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>preUnits</code></td>\\n        <td>\\n          Set to a string value (eg: <code>'$'</code>) to add a\\n          label prefix all y-labels.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>dateFormat</code></td>\\n        <td>\\n          A function that accepts millisecond timestamps and formats\\n          them for display as chart labels.\\n          <br>\\n          default: <code>function (x) &#123; return new Date(x).toString(); &#125;</code>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>xLabels</code></td>\\n        <td>\\n          Sets the x axis labelling interval.  By default the interval\\n          will be automatically computed.  The following are valid\\n          interval strings:\\n          <ul>\\n            <li><code>\\\"decade\\\"</code></li>\\n            <li><code>\\\"year\\\"</code></li>\\n            <li><code>\\\"month\\\"</code></li>\\n            <li><code>\\\"week\\\"</code></li>\\n            <li><code>\\\"day\\\"</code></li>\\n            <li><code>\\\"hour\\\"</code></li>\\n            <li><code>\\\"30min\\\"</code></li>\\n            <li><code>\\\"15min\\\"</code></li>\\n            <li><code>\\\"10min\\\"</code></li>\\n            <li><code>\\\"5min\\\"</code></li>\\n            <li><code>\\\"minute\\\"</code></li>\\n            <li><code>\\\"30sec\\\"</code></li>\\n            <li><code>\\\"15sec\\\"</code></li>\\n            <li><code>\\\"10sec\\\"</code></li>\\n            <li><code>\\\"5sec\\\"</code></li>\\n            <li><code>\\\"second\\\"</code></li>\\n          </ul>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>xLabelFormat</code></td>\\n        <td>\\n          A function that accepts Date objects and formats\\n          them for display as x-axis labels.  Overrides the default\\n          formatter chosen by the automatic labeller or the\\n          <code>xLabels</code> option.\\n          <br>\\n          eg: <code>function (x) &#123; return x.toString(); &#125;</code>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>xLabelAngle</code></td>\\n        <td>\\n          The angle in degrees from horizontal to draw x-axis labels.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>yLabelFormat</code></td>\\n        <td>\\n          A function that accepts y-values and formats\\n          them for display as y-axis labels.\\n          <br>\\n          eg: <code>function (y) &#123; return y.toString() + 'km'; &#125;</code>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>goals</code></td>\\n        <td>\\n          A list of y-values to draw as horizontal 'goal' lines on\\n          the chart.\\n          <br>\\n          eg: <code>goals: [1.0, -1.0]</code>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>goalStrokeWidth</code></td>\\n        <td>\\n          Width, in pixels, of the goal lines.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>goalLineColors</code></td>\\n        <td>\\n          Array of color values to use for the goal line colors.\\n          If you list fewer colors here than you have lines in\\n          <code>goals</code>, then the values will be cycled.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>events</code></td>\\n        <td>\\n          A list of x-values to draw as vertical 'event' lines on\\n          the chart.\\n          <br>\\n          eg: <code>events: ['2012-01-01', '2012-02-01', '2012-03-01']</code>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>eventStrokeWidth</code></td>\\n        <td>\\n          Width, in pixels, of the event lines.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>eventLineColors</code></td>\\n        <td>\\n          Array of color values to use for the event line colors.\\n          If you list fewer colors here than you have lines in\\n          <code>events</code>, then the values will be cycled.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>continuousLine</code></td>\\n        <td>\\n          When set to <code>false</code> (the default), all\\n          <code>null</code> and <code>undefined</code> values in a data\\n          series will be ignored and lines will be drawn spanning them.\\n          <br>\\n          When set to <code>true</code>, <code>null</code> values will break\\n          the line and <code>undefined</code> values will be spanned.\\n          <br>\\n          <em>\\n            Note: in v0.5.0, this setting will be removed and the\\n            behaviour will be to break lines at\\n            <code>null</code> values.\\n          </em>\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>axes</code></td>\\n        <td>\\n          Set to <code>false</code> to disable drawing the x and\\n          y axes.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>grid</code></td>\\n        <td>\\n          Set to <code>false</code> to disable drawing the horizontal\\n          grid lines.\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>gridTextColor</code></td>\\n        <td>\\n          Set the color of the axis labels (default: #888).\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>gridTextSize</code></td>\\n        <td>\\n          Set the point size of the axis labels (default: 12).\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>gridTextFamily</code></td>\\n        <td>\\n          Set the font family of the axis labels (default: sans-serif).\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>gridTextWeight</code></td>\\n        <td>\\n          Set the font weight of the axis labels (default: normal).\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>fillOpacity</code></td>\\n        <td>\\n          Change the opacity of the area fill colour. Accepts values\\n          between 0.0 (for completely transparent) and 1.0 (for completely\\n          opaque).\\n        </td>\\n      </tr>\\n      <tr>\\n        <td><code>resize</code></td>\\n        <td>\\n          Set to <code>true</code> to enable automatic resizing when the\\n          containing element resizes. (default: false).\\n          <br>\\n          This has a significant performance impact, so is disabled by\\n          default.\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</lte-box>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line.component.html\n// module id = ../../../../../demo/src/app/chart-line/chart-line.component.html\n// module chunks = chart-line.module","import { Component, OnInit, AfterViewInit } from '@angular/core';\n\nimport { chartLineData, chartLineOptions } from './morris-js-line';\n\ndeclare var Prism;\n\n@Component({\n  selector: 'app-chart-line',\n  templateUrl: './chart-line.component.html',\n  styleUrls: ['./chart-line.component.css']\n})\nexport class ChartLineComponent implements OnInit, AfterViewInit {\n  public chartLineData;\n  public chartLineOptions;\n\n  /**\n   * @method ngOnInit\n   */\n  ngOnInit() {\n    this.chartLineData = chartLineData;\n    this.chartLineOptions = chartLineOptions;\n  }\n\n  /**\n   * @method ngAfterViewInit\n   */\n  ngAfterViewInit() {\n    Prism.highlightAll();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BoxModule } from '../ng-admin-lte';\n\nimport { MorrisJsModule } from '../angular-morris-js';\n\nimport { ChartLineRoutingModule } from './chart-line-routing.module';\nimport { ChartLineComponent } from './chart-line.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ChartLineRoutingModule,\n    BoxModule,\n    MorrisJsModule,\n  ],\n  declarations: [ChartLineComponent]\n})\nexport class ChartLineModule { }\n\n\n\n// WEBPACK FOOTER //\n// /Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/chart-line.module.ts","export var chartLineOptions = {\n  xkey: 'y',\n  ykeys: ['a', 'b'],\n  labels: ['Series A', 'Series B'],\n  resize: true\n};\n\nexport var chartLineData =  [\n  { y: '2006', a: 100, b: 90 },\n  { y: '2007', a: 75,  b: 65 },\n  { y: '2008', a: 50,  b: 40 },\n  { y: '2009', a: 75,  b: 65 },\n  { y: '2010', a: 50,  b: 40 },\n  { y: '2011', a: 75,  b: 65 },\n  { y: '2012', a: 100, b: 90 }\n];\n\n\n\n// WEBPACK FOOTER //\n// /Users/mika/Développement/Angular/angular-morris-js/demo/src/app/chart-line/morris-js-line.ts"],"sourceRoot":"webpack:///"}